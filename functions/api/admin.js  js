export async function onRequestPost({ request, env }) {
  const { token, code, pass, action, target, amount } = await request.json();

  const username = await env.USERS_KV.get(`sess:${token}`);
  if (!username) return json({ error:"unauth" }, 401);

  if (code !== env.ADMIN_CODE || pass !== env.ADMIN_PASS) return json({ error:"forbidden" }, 403);

  if (action === "ping") return json({ ok:true });

  if (action === "grant") {
    const userKey = `user:${target || username}`;
    const user = await env.USERS_KV.get(userKey, "json");
    if (!user) return json({ error:"not_found" }, 404);
    user.balance = (user.balance || 0) + Number(amount || 0);
    await env.USERS_KV.put(userKey, JSON.stringify(user));
    return json({ ok:true, balance:user.balance });
  }

  if (action === "resetFaucet") {
    const userKey = `user:${target || username}`;
    const user = await env.USERS_KV.get(userKey, "json");
    if (!user) return json({ error:"not_found" }, 404);
    user.faucetAt = 0;
    await env.USERS_KV.put(userKey, JSON.stringify(user));
    return json({ ok:true });
  }

  if (action === "rotateSeed") {
    const prev = (await env.USERS_KV.get("pf:current")) || env.PF_SERVER_SEED || randomHex(32);
    const next = randomHex(32);
    await env.USERS_KV.put("pf:prev", prev);
    await env.USERS_KV.put("pf:current", next);
    return json({ ok:true, message:"Seed rotated. Commitment updated." });
  }

  return json({ error:"bad_action" }, 400);
}

function randomHex(n=32){ const u=new Uint8Array(n); crypto.getRandomValues(u); return [...u].map(b=>b.toString(16).padStart(2,"0")).join(""); }
function json(o,s=200){ return new Response(JSON.stringify(o), { status:s, headers:{ "content-type":"application/json" }}); }
